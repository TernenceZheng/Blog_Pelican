<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Richard隨手筆記 - 網路概論</title><link href="https://richardrobot.xyz/" rel="alternate"></link><link href="https://richardrobot.xyz/feeds/wang-lu-gai-lun.atom.xml" rel="self"></link><id>https://richardrobot.xyz/</id><updated>2022-01-12T15:44:00+08:00</updated><subtitle>紙上得來終覺淺，絕知此事要躬行</subtitle><entry><title>深入理解CORS</title><link href="https://richardrobot.xyz/2022/01/http-cors/" rel="alternate"></link><published>2022-01-12T15:44:00+08:00</published><updated>2022-01-12T15:44:00+08:00</updated><author><name>Richard</name></author><id>tag:richardrobot.xyz,2022-01-12:/2022/01/http-cors/</id><summary type="html">&lt;p&gt;在兩次的錯誤後，好好的來理解所謂的CORS問題處理&lt;/p&gt;</summary><content type="html">
&lt;h2 id="_1"&gt;前言&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;在兩篇文章的洗禮後，好好的來理解所謂的CORS問題處理&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://richardrobot.xyz/2022/01/cors-in-js-fix/"&gt;Fetch語法對Instagram的CORS問題&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://richardrobot.xyz/2022/01/iis-cors-404/"&gt;IIS站臺對Options請求直接返回404&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;W3C正式的CORS規範，其中，不單只是規範瀏覽器處理跨域請求的方式，也規範了伺服端可控制的項目，像是允許的來源、請求方法、可否發送Cookie、可取得的回應標頭，甚至回應有效期限等。&lt;/p&gt;
&lt;h2 id="http-headercors"&gt;Http Header的CORS項目&lt;a class="headerlink" href="#http-headercors" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="caps"&gt;CORS&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;Access-Control-Allow-Origin：&lt;ul&gt;
&lt;li&gt;server端接收跨來源時，授權來源，在Response加上此header，如果server允許任何來源的跨來源請求就使用  &lt;code&gt;*&lt;/code&gt; 號&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Access-Control-Allow-Credentials：&lt;ul&gt;
&lt;li&gt;設定值為True  False， 就是跨來源請求可以在Response時，取得一些cookie之類的資訊&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Access-Control-Allow-Headers：&lt;ul&gt;
&lt;li&gt;用於響應預檢請求，以指示在發出實際請求時可以使用哪些 &lt;span class="caps"&gt;HTTP&lt;/span&gt; 標頭。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Access-Control-Allow-Methods：&lt;ul&gt;
&lt;li&gt;指定在訪問資源以響應預檢請求時允許的一種或多種方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Access-Control-Expose-Headers：&lt;ul&gt;
&lt;li&gt;指示哪些標頭可以作為響應的一部分公開，讓 JavaScript 存取其他 header&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Access-Control-Max-Age：&lt;ul&gt;
&lt;li&gt;指示預檢請求的結果可以緩存多長時間&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Access-Control-Request-Headers：&lt;ul&gt;
&lt;li&gt;在&lt;em&gt;發出預檢請求時使用&lt;/em&gt;，以讓服務器知道在發出實際請求時將使用哪些 &lt;span class="caps"&gt;HTTP&lt;/span&gt; 標頭。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Access-Control-Request-Method：&lt;ul&gt;
&lt;li&gt;在&lt;em&gt;發出預檢請求時使用&lt;/em&gt;，以讓服務器知道在發出實際請求時將使用哪種HTTP 方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Origin：指示提取的來源&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="corssimplewith-preflight"&gt;CORS將跨域請求分為：簡單（Simple），以及帶預檢（with Preflight）&lt;a class="headerlink" href="#corssimplewith-preflight" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id="_2"&gt;簡單請求&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;方法只能是HEAD、&lt;span class="caps"&gt;GET&lt;/span&gt;、&lt;span class="caps"&gt;POST&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;可用標頭&lt;code&gt;Accept&lt;/code&gt;、&lt;code&gt;Accept-Language&lt;/code&gt;、&lt;code&gt;Content-Language&lt;/code&gt;、&lt;code&gt;Last-Event-ID&lt;/code&gt;，以及&lt;code&gt;Content-Type&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Content-Type也只允許三個值&lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt;、&lt;code&gt;multipart/form-data&lt;/code&gt;、&lt;code&gt;text/plain&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="簡單請求的圖例.png" src="https://richardrobot.xyz/images/簡單請求的圖例.png"/&gt;&lt;/p&gt;
&lt;h2 id="_3"&gt;預檢請求&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;分兩個步驟，第一步 http &lt;span class="caps"&gt;OPTIONS&lt;/span&gt; 方法，會帶有兩個 request header：&lt;code&gt;Access-Control-Request-Method&lt;/code&gt; 和 &lt;code&gt;Access-Control-Request-Headers&lt;/code&gt;。第二步在OPTIONS成功後，才能發送Request&lt;/p&gt;
&lt;p&gt;&lt;img alt="預檢請求的圖例.png" src="https://richardrobot.xyz/images/預檢請求的圖例.png"/&gt;&lt;/p&gt;
&lt;h2 id="fetch-api"&gt;關於fetch &lt;span class="caps"&gt;API&lt;/span&gt; 的問題&lt;a class="headerlink" href="#fetch-api" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;引用文章：&lt;/p&gt;
&lt;p&gt;很多人會認為只要將 fetch 裡的屬性 mode，調整成 &lt;code&gt;mode: 'no-cors'&lt;/code&gt;，就可以避免 &lt;span class="caps"&gt;CORS&lt;/span&gt;，其實不是！&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mode: 'no-cors&lt;/code&gt; 在設定上的意義是，告訴瀏覽器，我本來就知道 server 對於這個 request 是沒有設定可以存取 &lt;span class="caps"&gt;CORS&lt;/span&gt; 的，我本來就拿不到 response，我設定&lt;code&gt;mode: 'no-cors&lt;/code&gt;，是為了，就算無法存取，也不要跑到 .catch() 那邊，讓它出現 Error。&lt;/p&gt;
&lt;p&gt;一樣拿不到 server 的 response，但會拿到一個 &lt;code&gt;status: 0&lt;/code&gt; 的 response。&lt;/p&gt;
&lt;p&gt;結論：在 &lt;span class="caps"&gt;CORS&lt;/span&gt; 的限制底下，只有 server 開放 &lt;span class="caps"&gt;CORS&lt;/span&gt; 存取，你才拿得到 response，如果沒有開放，就一定拿不到。&lt;/p&gt;
&lt;p&gt;參考：&lt;/p&gt;
&lt;p&gt;&lt;a href="https://developer.mozilla.org/zh-TW/docs/Web/HTTP/Headers"&gt;&lt;span class="caps"&gt;MDN&lt;/span&gt; Docs &lt;span class="caps"&gt;HTTP&lt;/span&gt; 標頭&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.ithome.com.tw/voice/129558"&gt;深入認識跨域請求&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://shubo.io/what-is-cors/"&gt;&lt;span class="caps"&gt;CORS&lt;/span&gt; 是什麼? 如何設定 &lt;span class="caps"&gt;CORS&lt;/span&gt;?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://sa123.cc/mbz87ag1594xka2ohlgj.html"&gt;跨域（&lt;span class="caps"&gt;CORS&lt;/span&gt;）產生原因分析與解決方案，這一次徹底搞懂它&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://codertw.com/%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80/750548/"&gt;fetch捕獲重定向302/301&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://blog.techbridge.cc/2017/05/20/api-ajax-cors-and-jsonp/"&gt;輕鬆理解 Ajax 與跨來源請求&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://ithelp.ithome.com.tw/articles/10251693?sc=hot"&gt;[Day 27] Cross-Origin Resource Sharing (&lt;span class="caps"&gt;CORS&lt;/span&gt;)&lt;/a&gt;&lt;/p&gt;</content><category term="網路概論"></category><category term="CORS"></category></entry></feed>